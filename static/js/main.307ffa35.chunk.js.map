{"version":3,"sources":["components/cards.js","components/principalContainer.js","App.js","reportWebVitals.js","index.js"],"names":["TabPane","Tabs","Cards","useState","list","setList","itemsList","setItemsList","descriptionItem","setDescriptionItem","Form","useForm","form","changeColor","element","color","myData","tagsUpdated","map","value","idList","style","padding","tabPosition","tab","className","layout","onFinish","values","newList","title","description","uuidv4","resetFields","swal","icon","text","buttons","timer","Item","initialValues","remember","name","label","rules","required","fontWeight","TextArea","wrapperCol","offset","type","size","htmlType","overflowY","height","colorDiv","colorButtons","textAlign","onClick","shape","CloseCircleOutlined","id","results","filter","resultsItems","idfromList","deleteList","undefined","i","data","edit","EditOutlined","enableItem","idItem","deleteItem","PlusCircleOutlined","editItem","disableItem","width","onChange","e","target","handleChange","content","button","closeModal","then","newItem","reverse","Header","Layout","Content","Footer","PrincipalContainer","minHeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.307ffa35.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Tabs } from \"antd\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport swal from \"sweetalert\";\r\nimport \"./cards.css\";\r\nimport {\r\n  EditOutlined,\r\n  CloseCircleOutlined,\r\n  PlusCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nconst { TabPane } = Tabs;\r\n\r\nconst Cards = () => {\r\n  const [list, setList] = useState([]);\r\n  const [itemsList, setItemsList] = useState([]);\r\n  const [descriptionItem, setDescriptionItem] = useState(\"\");\r\n  const [form] = Form.useForm();\r\n\r\n  const createList = (values) => {\r\n    \r\n    let { title, description } = values;\r\n    let newList = {\r\n      title,\r\n      description,\r\n      idList: uuidv4(),\r\n      color: \"darkMode\",\r\n    };\r\n   \r\n    setList([...list, newList]);\r\n    form.resetFields();\r\n    swal({\r\n        icon: \"success\",\r\n        text: \"Created!\",\r\n        buttons: false,\r\n        timer: 1000,\r\n      });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    setDescriptionItem(value);\r\n  };\r\n\r\n  const addItem = (id) => {\r\n    swal({\r\n      text: \"Add new coment\",\r\n      content: \"input\",\r\n      className: \"blackMode\",\r\n      button: {\r\n        text: \"Add\",\r\n        closeModal: false,\r\n      },\r\n    }).then((data) => {\r\n      let newItem = {\r\n        idfromList: id,\r\n        idItem: uuidv4(),\r\n        description: data,\r\n        color: \"white\",\r\n        edit: false,\r\n      };\r\n      setItemsList([...itemsList, newItem]);\r\n      swal({\r\n        icon: \"success\",\r\n        text: \"Success\",\r\n        buttons: false,\r\n        timer: 1000,\r\n      });\r\n    });\r\n  };\r\n\r\n  const deleteItem = (id) => {\r\n    let results = itemsList.filter((element) => {\r\n      return element.idItem !== id;\r\n    });\r\n    setItemsList(results);\r\n  };\r\n\r\n  const deleteList = (id) => {\r\n    let results = list.filter((element) => {\r\n      return element.idList !== id;\r\n    });\r\n    let resultsItems = itemsList.filter((element) => {\r\n      return element.idfromList !== id;\r\n    });\r\n    setList(results);\r\n    setItemsList(resultsItems);\r\n    swal({\r\n        icon: \"success\",\r\n        text: \"Deleted!\",\r\n        buttons: false,\r\n        timer: 1500,\r\n      });\r\n  };\r\n\r\n  const enableItem = (element) => {\r\n    let myData = element;\r\n\r\n    myData.edit = true;\r\n\r\n    setDescriptionItem(myData.description);\r\n\r\n    const tagsUpdated = list.map((value) => {\r\n      if (value.idList === element.idList) {\r\n        return myData;\r\n      }\r\n      return value;\r\n    });\r\n\r\n    setList(tagsUpdated);\r\n  };\r\n\r\n  const disableItem = (element) => {\r\n    let myData = element;\r\n\r\n    myData.edit = false;\r\n\r\n    setDescriptionItem(myData.description);\r\n\r\n    const tagsUpdated = list.map((value) => {\r\n      if (value.idList === element.idList) {\r\n        return myData;\r\n      }\r\n      return value;\r\n    });\r\n\r\n    setList(tagsUpdated);\r\n  };\r\n\r\n  const editItem = (element) => {\r\n    let myData = element;\r\n\r\n    myData.description = descriptionItem;\r\n    myData.edit = false;\r\n\r\n    const tagsUpdated = list.map((value) => {\r\n      if (value.idList === element.idList) {\r\n        return myData;\r\n      }\r\n      return value;\r\n    });\r\n\r\n    setList(tagsUpdated);\r\n  };\r\n\r\n  const changeColor = (element, color) => {\r\n    let myData = element;\r\n\r\n    myData.color = color;\r\n\r\n    const tagsUpdated = list.map((value) => {\r\n      if (value.idList === element.idList) {\r\n        return myData;\r\n      }\r\n      return value;\r\n    });\r\n\r\n    setList(tagsUpdated);\r\n  };\r\n\r\n \r\n  return (\r\n    <div style={{ padding: \"3%\" }}>\r\n      <Tabs tabPosition=\"top\">\r\n        <TabPane tab=\"Create a List\" key=\"1\">\r\n          <div className=\"myForm\">\r\n            <Form form={form} layout=\"vertical\" onFinish={createList}>\r\n              <Form.Item\r\n                initialValues={{\r\n                  remember: true,\r\n                }}\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item\r\n                style={{  fontWeight: 700 }}\r\n                name=\"description\"\r\n                label=\"Description\"\r\n              >\r\n                <Input.TextArea />\r\n              </Form.Item>\r\n              <Form.Item wrapperCol={{ offset: 8 }}>\r\n                <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\r\n                  Create a new list\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        </TabPane>\r\n        <TabPane tab=\"My List\" key=\"2\">\r\n          <div style={{ overflowY: \"scroll\", height: \"70vh\" }}>\r\n            <div className=\"gridContent\">\r\n              {list.map((element) => {\r\n                let colorDiv;\r\n                let colorButtons;\r\n\r\n                switch (element.color) {\r\n                  case \"pinkMode\":\r\n                    colorDiv = \"pinkItems\";\r\n                    colorButtons = \"pinkButtons\";\r\n                    break;\r\n                  case \"purpleMode\":\r\n                    colorDiv = \"purpleItems\";\r\n                    colorButtons = \"purpleButtons\";\r\n                    break;\r\n                  case \"darkMode\":\r\n                    colorDiv = \"darkItems\";\r\n                    colorButtons = \"darkButtons\";\r\n                    break;\r\n                  case \"blueTrypanMode\":\r\n                    colorDiv = \"blueTrypanItems\";\r\n                    colorButtons = \"blueTrypanButtons\";\r\n                    break;\r\n                  case \"blueUltramarineMode\":\r\n                    colorDiv = \"blueUltramarineItems\";\r\n                    colorButtons = \"blueUltramarineButtons\";\r\n                    break;\r\n                  case \"blueSkyMode\":\r\n                    colorDiv = \"blueSkyItems\";\r\n                    colorButtons = \"blueSkyButtons\";\r\n                    break;\r\n                  default:\r\n                    break;\r\n                }\r\n\r\n                return (\r\n                  <div className={element.color}>\r\n                    <div style={{ textAlign: \"right\" }}>\r\n                      <Button\r\n                        onClick={() => {\r\n                          changeColor(element, \"pinkMode\");\r\n                        }}\r\n                        className=\"pink\"\r\n                        size=\"small\"\r\n                        shape=\"circle\"\r\n                      >\r\n                        {\" \"}\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          changeColor(element, \"purpleMode\");\r\n                        }}\r\n                        className=\"purple\"\r\n                        size=\"small\"\r\n                        shape=\"circle\"\r\n                      >\r\n                        {\" \"}\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          changeColor(element, \"darkMode\");\r\n                        }}\r\n                        className=\"dark\"\r\n                        size=\"small\"\r\n                        shape=\"circle\"\r\n                      >\r\n                        {\" \"}\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          changeColor(element, \"blueTrypanMode\");\r\n                        }}\r\n                        className=\"blueTrypan\"\r\n                        size=\"small\"\r\n                        shape=\"circle\"\r\n                      >\r\n                        {\" \"}\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          changeColor(element, \"blueUltramarineMode\");\r\n                        }}\r\n                        className=\"blueUltramarine\"\r\n                        size=\"small\"\r\n                        shape=\"circle\"\r\n                      >\r\n                        {\" \"}\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          changeColor(element, \"blueSkyMode\");\r\n                        }}\r\n                        className=\"blueSky\"\r\n                        size=\"small\"\r\n                        shape=\"circle\"\r\n                      >\r\n                        {\" \"}\r\n                      </Button>\r\n                      <CloseCircleOutlined\r\n                        className=\"deleteCircleList\"\r\n                        onClick={() => {\r\n                          deleteList(element.idList);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <h3 className=\"darkModeLetters\">{element.title} </h3>\r\n                    <p className=\"darkModeLetters\">\r\n                      {element.description === undefined\r\n                        ? \"No description added\"\r\n                        : element.description}\r\n                    </p>\r\n\r\n                    <div className=\"scrollDiv\">\r\n                      {itemsList\r\n                        .filter((i) => {\r\n                          return i.idfromList === element.idList;\r\n                        })\r\n                        .map((data) => {\r\n                          return (\r\n                            <div className={colorDiv} key={data.idItem}>\r\n                              <div style={{ textAlign: \"right\" }}>\r\n                                {!data.edit && (\r\n                                  <div>\r\n                                    <EditOutlined\r\n                                      onClick={() => {\r\n                                        enableItem(data);\r\n                                      }}\r\n                                    />\r\n                                    <CloseCircleOutlined\r\n                                      onClick={() => {\r\n                                        deleteItem(data.idItem);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                )}\r\n                                {data.edit && (\r\n                                  <div>\r\n                                    <PlusCircleOutlined\r\n                                      onClick={() => {\r\n                                        editItem(data);\r\n                                      }}\r\n                                    />\r\n                                    <CloseCircleOutlined\r\n                                      onClick={() => {\r\n                                        disableItem(data);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                              <div style={{ padding: \"2%\" }}>\r\n                                {!data.edit && <b>{data.description}</b>}\r\n                                {data.edit && (\r\n                                  <textarea\r\n                                    style={{ width: \"100%\", color: \"black\" }}\r\n                                    onChange={(e) => {\r\n                                      handleChange(e);\r\n                                    }}\r\n                                    value={descriptionItem}\r\n                                  />\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n\r\n                    <div className=\"containerButtons\">\r\n                      <Button\r\n                        size=\"medium\"\r\n                        className={colorButtons}\r\n                        onClick={() => addItem(element.idList)}\r\n                      >\r\n                        Add Coment\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }).reverse()}\r\n            </div>\r\n          </div>\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import './principalContainer.css'\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Layout } from 'antd';\r\nimport Cards from './cards'\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst PrincipalContainer = () => {\r\n\r\n    return(\r\n        <Layout style={{minHeight: \"100vh\"}} >\r\n            <Header><h1 style={{color:\"white\"}}>OpenNotes</h1></Header>\r\n                <Content>\r\n                    <div className=\"site-layout-content \">\r\n                     <Cards/>\r\n                    </div>\r\n                </Content>\r\n            <Footer style={{ textAlign: 'center' }}>WebApp to OpenMarket</Footer>\r\n      </Layout>\r\n    )\r\n}\r\n\r\nexport default PrincipalContainer","import './App.css';\nimport PrincipalContainer from './components/principalContainer'\n\nfunction App() {\n  return (\n    <PrincipalContainer/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}